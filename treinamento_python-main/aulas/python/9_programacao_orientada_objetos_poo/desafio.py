# üîπ DESAFIO: Criando um Sistema de Gest√£o de Ve√≠culos üöó

# üìå Enunciado:
# A concession√°ria "Super Carros" deseja um sistema para gerenciar seu estoque de ve√≠culos
# utilizando Programa√ß√£o Orientada a Objetos (POO). O sistema deve permitir o cadastro,
# listagem, edi√ß√£o e remo√ß√£o de ve√≠culos.
#
# O sistema deve funcionar da seguinte forma:
# 1. O usu√°rio pode cadastrar um novo ve√≠culo informando:
#    - Marca
#    - Modelo
#    - Ano
#    - Tipo (Carro, Moto, Caminh√£o) *(se nenhum tipo for informado corretamente, o padr√£o ser√° Carro)*.
# 2. O usu√°rio pode visualizar a lista de ve√≠culos cadastrados.
# 3. O usu√°rio pode editar os dados de um ve√≠culo existente.
# 4. O usu√°rio pode remover um ve√≠culo pelo √≠ndice da lista.
# 5. O sistema deve rodar em um loop at√© que o usu√°rio escolha sair.

# ‚úÖ Tarefa:
# - Criar uma classe `Veiculo` com atributos `marca`, `modelo` e `ano`.
# - Criar classes `Carro`, `Moto` e `Caminhao`, que herdam de `Veiculo` e adicionam um atributo `tipo`.
# - Criar uma classe `Concessionaria` que gerencia a lista de ve√≠culos.
# - Implementar m√©todos para cadastrar, listar, editar e remover ve√≠culos.
# - Criar um menu interativo para o usu√°rio.
#
# üî• Dica:
# - Utilize listas para armazenar os ve√≠culos.
# - Use `input()` para interagir com o usu√°rio.
# - Utilize heran√ßa para diferenciar os tipos de ve√≠culos.
# - Certifique-se de tratar entradas inv√°lidas.

# Classe base Veiculo

class Veiculo:
  def __init__(self, marca, modelo, ano):
    self.marca = marca
    self.modelo = modelo
    self.ano = ano

  def exibir_dados(self):
    print(f"Marca: {self.marca}")
    print(f"Modelo: {self.modelo}")
    print(f"Ano: {self.ano}")


class Carro(Veiculo):
  def __init__(self, marca, modelo, ano):
    super().__init__(marca, modelo, ano)
    self.tipo = "Carro"

  def exibir_dados(self):
    super().exibir_dados()
    print(f"Tipo: {self.tipo}")


class Moto(Veiculo):
  def __init__(self, marca, modelo, ano):
    super().__init__(marca, modelo, ano)
    self.tipo = "Moto"

  def exibir_dados(self):
    super().exibir_dados()
    print(f"Tipo: {self.tipo}")


class Caminhao(Veiculo):
  def __init__(self, marca, modelo, ano):
    super().__init__(marca, modelo, ano)
    self.tipo = "Caminhao"

  def exibir_dados(self):
    super().exibir_dados()
    print(f"Tipo: {self.tipo}")


class Concessionaria:
  def __init__(self):
    self.veiculos = []

  def cadastrar_veiculo(self):
    marca = input("Digite a marca do ve√≠culo: ")
    modelo = input("Digite o modelo do ve√≠culo: ")
    ano = input("Digite o ano do ve√≠culo: ")
    tipo = input("Digite o tipo do ve√≠culo (Carro, Moto, Caminhao): ")

    if tipo == "Carro":
      veiculo = Carro(marca, modelo, ano)
    elif tipo == "Moto":
      veiculo = Moto(marca, modelo, ano)
    elif tipo == "Caminhao":
      veiculo = Caminhao(marca, modelo, ano)
    else:
      print("Tipo de ve√≠culo inv√°lido.")
      return

    self.veiculos.append(veiculo)
    print("Ve√≠culo cadastrado com sucesso.")

  def listar_veiculos(self):
    for i, veiculo in enumerate(self.veiculos):
      print(f"Ve√≠culo {i+1}:")
      veiculo.exibir_dados()
      print()

  def editar_veiculo(self):
    indice = int(input("Digite o √≠ndice do ve√≠culo que deseja editar: ")) - 1
    if indice < 0 or indice >= len(self.veiculos):
      print("√çndice inv√°lido.")
      return

    veiculo = self.veiculos[indice]
    marca = input("Digite a nova marca do ve√≠culo: ")
    modelo = input("Digite o novo modelo do ve√≠culo: ")
    ano = input("Digite o novo ano do ve√≠culo: ")

    veiculo.marca = marca
    veiculo.modelo = modelo
    veiculo.ano = ano

    print("Ve√≠culo editado com sucesso.")

  def remover_veiculo(self):
    indice = int(input("Digite o √≠ndice do ve√≠culo que deseja remover: ")) - 1
    if indice < 0 or indice >= len(self.veiculos):
      print("√çndice inv√°lido.")
      return

    del self.veiculos[indice]
    print("Ve√≠culo removido com sucesso.")


def main():
  concessionaria = Concessionaria()

  while True:
    print("1. Cadastrar ve√≠culo")
    print("2. Listar ve√≠culos")
    print("3. Editar ve√≠culo")
    print("4. Remover ve√≠culo")
    print("5. Sair")

    opcao = input("Digite a op√ß√£o desejada: ")

    if opcao == "1":
      concessionaria.cadastrar_veiculo()
    elif opcao == "2":
      concessionaria.listar_veiculos()
    elif opcao == "3":
      concessionaria.editar_veiculo()
    elif opcao == "4":
      concessionaria.remover_veiculo()
    elif opcao == "5":
      print("Saindo do programa.")
      break
    else:
      print("Op√ß√£o inv√°lida. Tente novamente.")

if __name__ == "__main__":
  main()